window.Meta = (function() {

    function getRunCommand() {
        if (!runCommandEnabled()) {
            return "";
        }

        return $("#cmd-input").val();
    }

    function runCommandEnabled() {
        return $("#cmd-checkbox").is(":checked");
    }

    function filterStdoutEnabled() {
        return $("#filter-stdout").is(":checked");
    }

    function filterStdout(data) {
        if (filterStdoutEnabled()) {
            const regex = /(.*\n)*################ignore the above output################(\n)*/gm;
            data.stdout = data.stdout.replace(regex, "");
        }
        return data;
    }

    function getLanguageVersion() {
        return $("#lang-version").val();
    }

    function isPublic() {
        return $("#public").val() === "true";
    }

    return {
        getRunCommand: getRunCommand,
        getLanguageVersion: getLanguageVersion,
        filterStdoutEnabled: filterStdoutEnabled,
        filterStdout: filterStdout,
        isPublic: isPublic,
    };
})();


(function() {
    // Disable / enable command input
    $(document).on("click", "#cmd-checkbox", function(e) {
        var checked = $(e.target).is(":checked");
        $("#cmd-input").prop('disabled', !checked);
    });
})();

if (document.getElementById("more-actions")) {
    let amis = amisRequire('amis/embed');
    let amisLib = amisRequire('amis');
    let amisScoped = amis.embed('#more-actions', {
       "type": "page",
       "body": {
          "type": "button-group",
          "buttons": [{
                "type": "button",
                "data": {
                   run_command: "pwd",
                   compile_command: "echo 'test'",
                   lang: "huatuofocus"
                },
                "label": "测试",
                "visibleOn": "#{toJSON $ show lang} == 'csharp'",
                onClick: (e, props) => {
                    EditorFooter.showOutputTab(true);
                    EditorFooter.clear();
                    EditorFooter.showInfo("Running...");

                    var version = Meta.getLanguageVersion();
                    var url = "@{RunR lang}" + "?" + $.param({version: version});

                    console.log(e);
                    
                    var lang = props.defaultData.lang;
                    if (lang) {
                        url = url.replace(/\/run\/\w+/g, '/run/' + lang)
                    }

                    var payload = {
                        files: Editor.getFiles(),
                        stdin: EditorFooter.getStdin(),
                        command: Meta.getRunCommand(),
                        run_command: props.defaultData.run_command,
                        compile_command: props.defaultData.compile_command,
                    };

                    XHR.jsonPost(url, payload).done(function(data) {
                        data = Meta.filterStdout(data);
                        EditorFooter.show(data);
                    }).fail(function(xhr) {
                        Alert.danger(xhr.responseJSON.message);
                    }).always(function() {
                        EditorFooter.hideInfo();
                    });
                }
             }
          ]
       }
    });
}

