window.Meta = (function() {

    function getRunCommand() {
        if (!runCommandEnabled()) {
            return "";
        }

        return $("#cmd-input").val();
    }

    function runCommandEnabled() {
        return $("#cmd-checkbox").is(":checked");
    }

    function filterStdoutEnabled() {
        return $("#filter-stdout").is(":checked");
    }

    function filterStdout(data) {
        if (filterStdoutEnabled()) {
            const regex = /(.*\n)*################ignore the above output################(\n)*/gm;
            data.stdout = data.stdout.replace(regex, "");
        }
        return data;
    }

    function getLanguageVersion() {
        return $("#lang-version").val();
    }

    function isPublic() {
        return $("#public").val() === "true";
    }

    return {
        getRunCommand: getRunCommand,
        getLanguageVersion: getLanguageVersion,
        filterStdoutEnabled: filterStdoutEnabled,
        filterStdout: filterStdout,
        isPublic: isPublic,
    };
})();


(function() {
    // Disable / enable command input
    $(document).on("click", "#cmd-checkbox", function(e) {
        var checked = $(e.target).is(":checked");
        $("#cmd-input").prop('disabled', !checked);
    });
})();

if (document.getElementById("more-actions")) {
    
    function Run (runData) {
        EditorFooter.showOutputTab(true);
        EditorFooter.clear();
        EditorFooter.showInfo("Running...");

        var version = Meta.getLanguageVersion();
        var url = "@{RunR lang}" + "?" + $.param({version: version});

        console.log(e);
        
        var lang = runData.lang;
        if (lang) {
            url = url.replace(/\/run\/\w+/g, '/run/' + lang)
        }

        var payload = {
            files: Editor.getFiles(),
            stdin: EditorFooter.getStdin(),
            command: Meta.getRunCommand(),
            run_command: runData.run_command,
            compile_command: runData.compile_command,
        };

        XHR.jsonPost(url, payload).done(function(data) {
            // data = Meta.filterStdout(data);
            EditorFooter.show(data);
        }).fail(function(xhr) {
            Alert.danger(xhr.responseJSON.message);
        }).always(function() {
            EditorFooter.hideInfo();
        });
    }

    let amis = amisRequire('amis/embed');
    let amisLib = amisRequire('amis');

    let amisJSON = {
        "type": "page",
        "body": {
            "type": "form",
            "title": "",
            "body": [{
                "name": "compile_command",
                "type": "input-text",
                "label": "编译命令",
                "clearable": true,
                "options": [{
                    "label": "mcs",
                    "value": "mcs -unsafe -out:a.exe *.cs"
                },
                {
                    "label": "mcs&il2cpp",
                    "value": "mcs -unsafe -r:/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/mscorlib.dll -r:/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/System.Core.dll -nostdlib -noconfig -out:a.exe *.cs && /il2cpp_env/il2cpp/build/deploy/netcoreapp3.1/il2cpp --convert-to-cpp --emit-null-checks --enable-array-bounds-check --dotnetprofile='unityaot' --compile-cpp --libil2cpp-static --platform='Linux' --architecture='x64' --configuration='Release' --baselib-directory=/il2cpp_env --generatedcppdir=./output/CSharp --cachedirectory=./output/cache --assembly=./a.exe --assembly=/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/mscorlib.dll --outputpath=./output/a.exe"
                }]
            },
            {
                "name": "run_command",
                "type": "input-text",
                "label": "运行命令",
                "clearable": true,
                "options": [{
                    "label": "mono",
                    "value": "mono a.exe"
                },
                {
                    "label": "mono interpreter",
                    "value": "mono --interpreter a.exe"
                },
                {
                    "label": "il2cpp",
                    "value": "output/a.exe"
                }]
            }],
            "actions": [
            {
                "type": "button",
                "label": "amis",
                "visibleOn": '#{toJSON $ show lang} == "javascript"',
                onClick: (e, props) => {
                    const files = Editor.getFiles();
                    const func = Function(files[0].content);
                    amis.embed('#amis_root', func());
                }
            },
            {
                "type": "button",
                "label": "il",
                "level": "light",
                "data": {
                    run_command: "monodis a.exe",
                    lang: "huatuofocus"
                },
                "visibleOn": '#{toJSON $ show lang} == "csharp"',
                "onClick": (e, props) => { Run(props.defaultData); },
            },
            {
                "type": "button",
                "label": "cpp",
                "level": "light",
                "data": {
                    compile_command: "mcs -debug -unsafe -r:/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/mscorlib.dll -r:/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/System.Core.dll -nostdlib -noconfig -out:a.exe *.cs && /il2cpp_env/il2cpp/build/deploy/netcoreapp3.1/il2cpp --convert-to-cpp --emit-null-checks --enable-array-bounds-check --dotnetprofile='unityaot' --libil2cpp-static --platform='Linux' --architecture='x64' --configuration='Release' --baselib-directory=/il2cpp_env --generatedcppdir=./output/CSharp --cachedirectory=./output/cache --assembly=./a.exe --assembly=/il2cpp_env/MonoBleedingEdge/lib/mono/unityaot/mscorlib.dll",
                    run_command: "cat output/CSharp/a.cpp output/CSharp/a_CodeGen.c",
                    lang: "huatuofocus"
                },
                "onClick": (e, props) => { Run(props.defaultData); },
            },
            {
                "type": "button",
                "label": "运行",
                "level": "primary",
                "onClick": (e, props) => { Run(props.data); },
            }]
        }
    };

    let amisScoped = amis.embed('#more-actions', amisJSON);
}
